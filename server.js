const express = require('express');
const ExcelJS = require('exceljs');
const path = require('path');
const fsSync = require('fs');
const session = require('express-session');

const app = express();

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º –∏ JSON
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
app.use(express.static(path.join(__dirname, 'public')));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
  secret: 'your-secret-key', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
  resave: false,
  saveUninitialized: false,
  cookie: { secure: process.env.NODE_ENV === 'production' } // –î–ª—è Vercel secure: true
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let users = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users.xlsx
const loadUsers = async () => {
  try {
    const filePath = path.join(process.cwd(), 'users.xlsx');
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞: ${filePath}`);
    if (!fsSync.existsSync(filePath)) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è Vercel
      const alternativePath = path.join('/vercel/path0', 'users.xlsx');
      console.log(`–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è Vercel: ${alternativePath}`);
      if (!fsSync.existsSync(alternativePath)) {
        console.error(`–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –ø—É—Ç–∏ ${filePath}, –Ω–∏ –ø–æ –ø—É—Ç–∏ ${alternativePath}`);
        return [];
      }
      filePath = alternativePath;
    }

    const workbook = new ExcelJS.Workbook();
    console.log('–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ users.xlsx...');
    await workbook.xlsx.readFile(filePath);

    let sheet = workbook.getWorksheet('Users');
    if (!sheet) {
      console.error('–õ–∏—Å—Ç "Users" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return [];
    }

    const users = [];
    sheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
      if (rowNumber > 1) {
        const username = String(row.getCell(1).value || '').trim();
        const password = String(row.getCell(2).value || '').trim();
        console.log(`–°—Ç—Ä–æ–∫–∞ ${rowNumber}: username="${username}", password="${password}"`);
        if (username && password) {
          users.push({ username, password });
        }
      }
    });

    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, users);
    return users;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    return [];
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ questionsX.xlsx
const loadQuestions = async (questionsFile) => {
  try {
    const filePath = path.join(process.cwd(), questionsFile);
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: ${filePath}`);
    if (!fsSync.existsSync(filePath)) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è Vercel
      const alternativePath = path.join('/vercel/path0', questionsFile);
      console.log(`–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è Vercel: ${alternativePath}`);
      if (!fsSync.existsSync(alternativePath)) {
        console.error(`–§–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –ø—É—Ç–∏ ${filePath}, –Ω–∏ –ø–æ –ø—É—Ç–∏ ${alternativePath}`);
        return [];
      }
      filePath = alternativePath;
    }

    const workbook = new ExcelJS.Workbook();
    console.log(`–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ${questionsFile}...`);
    await workbook.xlsx.readFile(filePath);

    let sheet = workbook.getWorksheet('Questions') || workbook.getWorksheet('Sheet1');
    if (!sheet) {
      console.error('–õ–∏—Å—Ç "Questions" –∏–ª–∏ "Sheet1" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return [];
    }

    const questions = [];
    sheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
      if (rowNumber > 1) {
        const pictureNumber = String(row.getCell(1).value || '').trim();
        const picture = pictureNumber ? `/images/Picture${pictureNumber}.png` : null;
        const question = {
          picture: picture,
          text: String(row.getCell(2).value || '').trim(),
          type: String(row.getCell(27).value || 'multiple').trim().toLowerCase(),
          options: [],
          correctAnswers: [],
          points: parseInt(row.getCell(28).value) || 1,
        };

        // –ß–∏—Ç–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (—Å—Ç–æ–ª–±—Ü—ã 3‚Äì14)
        for (let i = 3; i <= 14; i++) {
          const option = row.getCell(i).value;
          if (option) question.options.push(String(option).trim());
        }

        // –ß–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—Å—Ç–æ–ª–±—Ü—ã 15‚Äì26)
        for (let i = 15; i <= 26; i++) {
          const correctAnswer = row.getCell(i).value;
          if (correctAnswer) question.correctAnswers.push(String(correctAnswer).trim());
        }

        if (question.text) questions.push(question);
      }
    });

    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ ${questionsFile}`);
    return questions;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ ${questionsFile}: ${error.message}`);
    return [];
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const initializeServer = async () => {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
  users = await loadUsers();
  if (users.length === 0) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª users.xlsx.');
  }
};

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–≤—Ö–æ–¥)
app.get('/login', (req, res) => {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /select-test
  if (req.session.isAuthenticated) {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /select-test');
    return res.redirect('/select-test');
  }

  res.send(`
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å</title>
        <style>
          body {
            font-size: 16px;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            flex-direction: column;
          }
          .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 400px;
            padding: 20px;
            box-sizing: border-box;
          }
          h1 {
            font-size: 24px;
            margin-bottom: 20px;
            text-align: center;
          }
          form {
            width: 100%;
            max-width: 300px;
          }
          label {
            display: block;
            margin: 10px 0 5px;
          }
          .password-container {
            display: flex;
            align-items: center;
            position: relative;
            width: 100%;
          }
          .eye-icon {
            font-size: 20px;
            cursor: pointer;
            margin-right: 10px;
          }
          input[type="password"], input[type="text"] {
            font-size: 16px;
            padding: 5px;
            width: 100%;
            box-sizing: border-box;
          }
          button {
            font-size: 16px;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            margin-top: 10px;
            display: block;
            width: 100%;
          }
          button:hover {
            background-color: #0056b3;
          }
          .error {
            color: red;
            margin-top: 10px;
            text-align: center;
            font-size: 14px;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å</h1>
          <form action="/login" method="POST">
            <label>–ü–∞—Ä–æ–ª—å:</label>
            <div class="password-container">
              <span class="eye-icon" onclick="togglePassword()">üëÅÔ∏è</span>
              <input type="password" id="password" name="password" required>
            </div>
            <label><input type="checkbox" name="rememberMe"> –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –º–µ–Ω–µ</label>
            <button type="submit">–£–≤—ñ–π—Ç–∏</button>
          </form>
          <p id="error" class="error"></p>
        </div>
        <script>
          function togglePassword() {
            const passwordInput = document.getElementById('password');
            const eyeIcon = document.querySelector('.eye-icon');
            if (passwordInput.type === 'password') {
              passwordInput.type = 'text';
              eyeIcon.textContent = 'üôà';
            } else {
              passwordInput.type = 'password';
              eyeIcon.textContent = 'üëÅÔ∏è';
            }
          }

          const urlParams = new URLSearchParams(window.location.search);
          const error = urlParams.get('error');
          if (error) {
            document.getElementById('error').textContent = decodeURIComponent(error);
          }
        </script>
      </body>
    </html>
  `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
app.post('/login', async (req, res) => {
  const { password } = req.body;
  console.log(`–í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: "${password}"`);

  if (!password) {
    console.log('–ü–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π');
    return res.redirect('/login?error=' + encodeURIComponent('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º'));
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  if (users.length === 0) {
    console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç');
    return res.redirect('/login?error=' + encodeURIComponent('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ'));
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
  const trimmedPassword = password.trim();
  console.log(`–ü–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ trim: "${trimmedPassword}"`);
  console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users);
  const user = users.find(u => u.password === trimmedPassword);
  if (!user) {
    console.log('–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    return res.redirect('/login?error=' + encodeURIComponent('–ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π'));
  }

  console.log(`–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);
  req.session.isAuthenticated = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
  res.redirect('/select-test');
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const checkAuth = (req, res, next) => {
  if (!req.session.isAuthenticated) {
    console.log('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /select-test');
    return res.redirect('/login?error=' + encodeURIComponent('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å'));
  }
  next();
};

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
app.get('/select-test', checkAuth, (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–í–∏–±—ñ—Ä —Ç–µ—Å—Ç—É</title>
        <style>
          body {
            font-size: 32px;
            margin: 20px;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
          }
          h1 {
            margin-bottom: 20px;
          }
          .tests {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            width: 100%;
            max-width: 500px;
          }
          button {
            font-size: 32px;
            padding: 10px 20px;
            width: 100%;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
          }
          button:hover {
            background-color: #0056b3;
          }
        </style>
      </head>
      <body>
        <h1>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç</h1>
        <div class="tests">
          <button onclick="window.location.href='/test/1'">–¢–µ—Å—Ç 1</button>
          <button onclick="window.location.href='/test/2'">–¢–µ—Å—Ç 2</button>
          <button onclick="window.location.href='/logout'">–í–∏–π—Ç–∏</button>
        </div>
      </body>
    </html>
  `);
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∞
app.get('/test/:testNumber', checkAuth, async (req, res) => {
  const { testNumber } = req.params;
  const questionsFile = testNumber === '1' ? 'questions1.xlsx' : 'questions2.xlsx';
  const testName = testNumber === '1' ? '–¢–µ—Å—Ç 1' : '–¢–µ—Å—Ç 2';

  const questions = await loadQuestions(questionsFile);
  if (questions.length === 0) {
    return res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–ü–æ–º–∏–ª–∫–∞</title>
        </head>
        <body>
          <h1>–ü–æ–º–∏–ª–∫–∞</h1>
          <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è ${testName}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª ${questionsFile}.</p>
          <button onclick="window.location.href='/select-test'">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ç–µ—Å—Ç—É</button>
        </body>
      </html>
    `);
  }

  // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
  res.send(`
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${testName}</title>
        <style>
          body {
            font-size: 32px;
            margin: 20px;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
          }
          h1 {
            margin-bottom: 20px;
          }
          .question {
            margin-bottom: 20px;
          }
          .options {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
          }
          .option {
            font-size: 32px;
            padding: 10px;
            width: 100%;
            max-width: 500px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #f0f0f0;
            text-align: left;
          }
          img {
            max-width: 100%;
            height: auto;
            margin-bottom: 20px;
          }
          button {
            font-size: 32px;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
          }
          button:hover {
            background-color: #0056b3;
          }
        </style>
      </head>
      <body>
        <h1>${testName}</h1>
        ${questions.map((q, idx) => `
          <div class="question">
            ${q.picture ? `<img src="${q.picture}" alt="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è" onerror="this.src='/images/placeholder.png'">` : ''}
            <p>–ü–∏—Ç–∞–Ω–Ω—è ${idx + 1}: ${q.text}</p>
            <div class="options">
              ${q.options.map(opt => `<div class="option">${opt}</div>`).join('')}
            </div>
            <p>–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${q.correctAnswers.join(', ')}</p>
          </div>
        `).join('')}
        <button onclick="window.location.href='/select-test'">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ç–µ—Å—Ç—É</button>
      </body>
    </html>
  `);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞
app.get('/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ${err.message}`);
      return res.redirect('/select-test');
    }
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');
    res.redirect('/login');
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  await initializeServer();
});
